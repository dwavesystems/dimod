version: 2.1

orbs:
  win: circleci/windows@2.2.0

environment:
  PIP_PROGRESS_BAR: off

jobs:
  build-manylinux:

    parameters:
      manylinux-tag:
        type: string
      manylinux-arch:
        type: string
      python-version:
        type: string

    docker:
      - image: quay.io/pypa/<< parameters.manylinux-tag >>_<< parameters.manylinux-arch >>

    working_directory: /dimod

    steps:
      - checkout

      - run:
          name: Fix git checkout
          command: git reset --hard

      - run:
          name: Build wheels
          command: |
            for py in /opt/python/cp*/bin/python; do
              ver=$("$py" -c 'import sys; print("{0.major}.{0.minor}".format(sys.version_info))')
              req=<< parameters.python-version >>
              [[ "$ver" != "${req:0:3}" ]] && continue
              "$py" -m pip wheel . -w ./wheelhouse --no-deps
            done

      - run:
          name: bundle shared libraries into wheels
          command: |
            for whl in ./wheelhouse/dimod*.whl; do
              auditwheel repair "$whl" -w ./dist
            done

      - store_artifacts:
          path: ./dist

      - persist_to_workspace:
          root: /dimod/dist/
          paths: .

  build-sdist:
    docker:
      - image: circleci/python:3.9-buster

    working_directory: ~/build

    steps:
      - checkout

      - run:
          name: build sdist
          command: |
            python -m venv build_env
            . build_env/bin/activate
            pip install -r requirements.txt
            python setup.py sdist -d ./dist

      - store_artifacts:
          path: ./dist

      - persist_to_workspace:
          root: ~/build/dist/
          paths: .

  test-sdist:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - attach_workspace:
          at: dist

      - run:
          name: install from sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install dist/dimod*.tar.gz

  test-linux:
    parameters:
      python-version:
        type: string
      numpy-version:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout

      - attach_workspace:
          at: dist

      # Make sure that we're using the built dimod and not one from pypi
      - run:
          name: install
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r tests/requirements.txt
            pip install 'numpy<< parameters.numpy-version >>' --upgrade --only-binary=numpy
            pip install dimod --no-index -f dist/ --no-deps --force-reinstall

      - run:
          name: run tests
          command: |
            . env/bin/activate
            cd tests/
            coverage run --source=dimod --append -m unittest

      - run:
          name: run tests with dwave-preprocessing
          command: |
            . env/bin/activate
            pip install 'dwave-preprocessing<0.4' --no-deps
            cd tests/
            coverage run --source=dimod --append -m unittest

      - run:
          name: codecov
          command: |
            . env/bin/activate
            cd tests/
            codecov

  deploy-linux:
    docker:
      - image: circleci/python:3.9

    steps:
      - attach_workspace:
          at: dist

      - store_artifacts:
          path: ./dist

      - run:
          name: deploy
          command: |
            python -m venv env
            . env/bin/activate
            python -m pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

  test-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: "12.2.0"

    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

      # Force (lie about) macOS 10.9 binary compatibility.
      # Needed for properly versioned wheels.
      # See: https://github.com/MacPython/wiki/wiki/Spinning-wheels
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run: &osx-install-template
          name: install
          command: |
            eval "$(pyenv init -)"
            pyenv local << parameters.python-version >>
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r tests/requirements.txt

      # do this as an extra step since we want --no-deps and since it will
      # be removed relatively soon
      - run:
          name: install dwave-preprocessing
          command: |
            . env/bin/activate
            pip install 'dwave-preprocessing<0.4' --no-deps

      - run: &unix-build-ext-template
          name: build
          command: |
            . env/bin/activate
            python setup.py build_ext --inplace

      - run:
          name: run tests
          command: |
            . env/bin/activate
            python --version
            coverage run -m unittest discover

      - run:
          name: codecov
          command: |
            . env/bin/activate
            codecov

  deploy-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: "12.2.0"

    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

      # Force (lie about) macOS 10.9 binary compatibility.
      # Needed for properly versioned wheels.
      # See: https://github.com/MacPython/wiki/wiki/Spinning-wheels
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run: *osx-install-template

      - run:
          name: create bdist_wheel
          command: |
            . env/bin/activate
            python -m pip install wheel
            python setup.py bdist_wheel

      - run:
          name: deploy
          command: |
            . env/bin/activate
            python -m pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

  test-win:
    parameters:
      python-version:
        type: string
      architecture:
        type: string

    executor:
      name: win/default

    environment:
      CL: /d2FH4-

    steps:
      - checkout

      - run: &win-install-python-template
          name: install python and create venv
          command: |
            nuget install python<< parameters.architecture >> -Version << parameters.python-version >> -ExcludeVersion -OutputDirectory .
            .\python<< parameters.architecture >>\tools\python.exe --version
            .\python<< parameters.architecture >>\tools\python.exe -m venv env

      - run: &win-install-dependencies-template
          name: install dependencies
          command: |
            env\Scripts\activate.ps1
            python --version
            pip install -r requirements.txt
            pip install -r tests\requirements.txt

      # do this as an extra step since we want --no-deps and since it will
      # be removed relatively soon
      - run:
          name: install dwave-preprocessing
          command: |
            env\Scripts\activate.ps1
            pip install 'dwave-preprocessing<0.4' --no-deps

      - run:
          name: build extension
          command: |
            env\Scripts\activate.ps1
            python setup.py build_ext --inplace

      - run:
          name: run unittests
          command: |
            env\Scripts\activate.ps1
            coverage run -m unittest discover

      - run:
          name: codecov
          command: |
            env\Scripts\activate.ps1
            codecov

  deploy-win:
    parameters:
      python-version:
        type: string
      architecture:
        type: string

    executor:
      name: win/default

    environment:
      CL: /d2FH4-

    steps:
      - checkout

      - run: *win-install-python-template

      - run: *win-install-dependencies-template

      - run:
          name: create wheel
          command: |
            env\Scripts\activate.ps1
            python -m pip install wheel
            python setup.py bdist_wheel

      - store_artifacts:
          path: ./dist

      - run: &win-twine-template
          name: install twine and deploy
          command: |
            env\Scripts\activate.ps1
            python -m pip install twine
            twine upload -u $env:PYPI_USERNAME -p $env:PYPI_PASSWORD --skip-existing ./dist/*


  test-doctest:
    docker:
      - image: circleci/python:3.7-stretch # as of march 2019 RTD uses 3.7

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install doxygen
          command: sudo apt-get install doxygen

      - run:
          name: install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r docs/requirements.txt
            pip install dwave-preprocessing --no-deps

      - run: *unix-build-ext-template

      - run:
          name: build docs
          command: |
            . env/bin/activate
            make -C docs/ cpp html

      - store_artifacts:
          path: ./docs/build/html

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest

      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  test-linux-cpp11:
    docker:
      # just use a python image, all we really want is debian
      - image: circleci/python:3.6-jessie

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: run cpp tests
          command: |
            make -C testscpp/ --always-make

workflows:
  tests:
    jobs:
      - build-manylinux:
          name: build-<< matrix.manylinux-tag >>_<< matrix.manylinux-arch >>-py<< matrix.python-version >>
          matrix:
            parameters:
              python-version: &python-versions [3.6.8, 3.7.9, 3.8.9, 3.9.4]
              manylinux-tag: &manylinux-tags ["manylinux1", "manylinux2014"]
              manylinux-arch: &manylinux-archs ["x86_64"]
      - test-linux:
          name: test-linux-numpy<< matrix.numpy-version >>-py<< matrix.python-version >>
          # We could break each of these out into seperate jobs so that we
          # don't need to wait for the entire above matrix to complete, but
          # this is cleaner
          requires:
            - build-manylinux
          matrix:
            parameters:
              # test the lowest numpy version and the highest minor of each
              # currently deployed
              numpy-version: [==1.17.3, <1.19, <1.20, <1.21]
              python-version: *python-versions
            exclude:
              - numpy-version: <1.21
                python-version: 3.6.8
              - numpy-version: <1.19
                python-version: 3.9.4
              - numpy-version: <1.18
                python-version: 3.9.4
              - numpy-version: ==1.17.3
                python-version: 3.9.4
      - test-osx:
          matrix:
            parameters:
              python-version: *python-versions
      - test-win:
          matrix:
            parameters:
              python-version: *python-versions
              architecture: ["", "x86"]
      - build-sdist
      - test-sdist:
          requires:
            - build-sdist
      - test-doctest
      - test-linux-cpp11

  deploy:
    jobs:
      - build-manylinux:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          name: build-<< matrix.manylinux-tag >>_<< matrix.manylinux-arch >>-py<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              manylinux-tag: *manylinux-tags
              manylinux-arch: *manylinux-archs
      - build-sdist:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-linux:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          requires:
            - build-manylinux
            - build-sdist
      - deploy-osx:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              python-version: *python-versions
      - deploy-win:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              python-version: *python-versions
              architecture: ["", "x86"]
